#+TITLE: Expression - Expression templates library


* Overview

  #+BEGIN_SRC c++
  constexpr 
  struct AddM : Lambda<AddM> {
  
    constexpr static mx = var<0>;
    constexpr static my = var<1>;
    constexpr static x  = var<2>;
    constexpr static y  = var<3>;

    constexpr static proc =
      fn( mx, my,
	  (letm( x = mx,
		 y = my ),
	   rtn(x + y)));
  } addM{};
  #+END_SRC


  #+BEGIN_SRC c++
  struct Game {
    constexpr proc =
      fn( xs, fn( f, f( f, xs ))(
	    fn( f, xs,
		iff( null( xs ),
		     (letM( s = state_get ),
		      unit( s )),
		     (letM( s = state_get ),
		      state_put( update( hd( xs ), s )),
		      env_unit( f( f, tl( xs ))))))));

  };
  #+END_SRC


  #+BEGIN_SRC c++
  constexpr
  struct Fib {
    constexpr static fib = var<0>;
    constexpr static n = var<1>;
    constexpr static f = var<2>;

    costexpr auto f = compile(
      def( fib( n ), fn( f, f( f ))(
	     fn( f, n, accum, 
		 iff( n == 0,
		 accum,
		      f(f, n+1, accum*n))))));

  };

  #+END_SRC
